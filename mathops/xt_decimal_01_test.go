package mathops

import (
	"fmt"

	"math/big"
	"testing"
)

/*
	These tests are associated with the library routines contained in source code file
	decimal.go. The source code repository for these these tests is located at:

				https://github.com/MikeAustin71/decimalnum.git
*/

func TestNumStrUtility_ConvertNumStrToDecimal_01(t *testing.T) {

	str := "123456.654321"
	sint := "123456654321"
	nsu := NumStrUtility{}
	dec, err := nsu.ConvertNumStrToDecimal(str)

	if err != nil {
		t.Errorf("Error from nsu.ConvertNumStrToDecimal(str). str= '%v'. Error= %v", str, err.Error())
	}

	if dec.GetNumStr() != str {
		t.Errorf("Expected NumStrOut= '%v'. Instead, got %v", str, dec.GetNumStr())
	}

	if dec.GetPrecision() != 6 {
		t.Errorf("Expected precision = '6'. Instead, got %v", dec.GetPrecision())
	}

	allDigits, _ := dec.GetSignedAllDigitsStr()

	if allDigits != sint {
		t.Errorf("Expected nDto.SignedAllDigitsBigInt='%v'. Instead, got %v. ", sint, allDigits)
	}

	_, accuracy, err := dec.GetFloat64()

	if accuracy.String() != "Exact" {
		t.Errorf("Expected nDto.SignedFloat64Accuracy == 'Exact'. Instead, got %v.", accuracy.String())
	}

	bf, _ := dec.GetBigFloat()
	s := fmt.Sprintf("%s", bf.Text('f', dec.GetPrecision()))

	if s != str {
		t.Errorf("Expected nDto.SignedBigFloat='%v'. Instead, got %v. ", str, s)

	}

	if !dec.GetIsValid() {
		t.Errorf("Expected nDto.isValid == 'true'. Instead, got %v", dec.GetIsValid())
	}

}

func TestNumStrUtility_ConvertNumStrToDecimal_02(t *testing.T) {

	str := "-123456.654321"
	sint := "-123456654321"
	nsu := NumStrUtility{}
	dec, err := nsu.ConvertNumStrToDecimal(str)

	if err != nil {
		t.Errorf("Error from nsu.ConvertNumStrToDecimal(str). str= '%v'. Error= %v", str, err.Error())
	}

	if str != dec.GetNumStr() {
		t.Errorf("Expected NumStrOut= '%v'. Instead, got %v", str, dec.GetNumStr())
	}


	if dec.GetPrecision() != 6 {
		t.Errorf("Expected precision = '6'. Instead, got %v", dec.GetPrecision())
	}

	allDigits, _ := dec.GetSignedAllDigitsStr()

	if allDigits != sint {
		t.Errorf("Expected nDto.SignedAllDigitsBigInt='%v'. Instead, got %v. ", sint, allDigits)
	}

	_, accuracy, _ := dec.GetFloat64()

	if accuracy.String() != "Exact" {
		t.Errorf("Expected nDto.SignedFloat64Accuracy == 'Exact'. Instead, got %v.", accuracy.String())
	}

	bf, _ := dec.GetBigFloat()
	s := bf.Text('f', dec.GetPrecision())

	if s != str {
		t.Errorf("Expected nDto.SignedBigFloat='%v'. Instead, got %v. ", str, s)

	}

	if !dec.GetIsValid() {
		t.Errorf("Expected nDto.isValid == 'true'. Instead, got %v", dec.GetIsValid())
	}

}

func TestNumStrUtility_ConvertNumStrToDecimal_03(t *testing.T) {

	rawStr := "zyx -123456.654321 xyx"
	str := "-123456.654321"
	sint := "-123456654321"
	nsu := NumStrUtility{}
	dec, err := nsu.ConvertNumStrToDecimal(rawStr)

	if err != nil {
		t.Errorf("Error from nsu.ConvertNumStrToDecimal(str). str= '%v'. Error= %v", str, err.Error())
	}

	if str != dec.GetNumStr() {
		t.Errorf("Expected NumStrOut= '%v'. Instead, got %v", str, dec.GetNumStr())
	}


	if dec.GetPrecision() != 6 {
		t.Errorf("Expected precision = '6'. Instead, got %v", dec.GetPrecision())
	}

	allDigits, _ := dec.GetSignedAllDigitsStr()

	if allDigits != sint {
		t.Errorf("Expected nDto.SignedAllDigitsBigInt='%v'. Instead, got %v. ", sint, allDigits)
	}

	_, accuracy, _ := dec.GetFloat64()

	if accuracy.String() != "Exact" {
		t.Errorf("Expected nDto.SignedFloat64Accuracy == 'Exact'. Instead, got %v.", accuracy.String())
	}

	bf, _ := dec.GetBigFloat()
	s := bf.Text('f', dec.GetPrecision())

	if s != str {
		t.Errorf("Expected nDto.SignedBigFloat='%v'. Instead, got %v. ", str, s)

	}

	if !dec.GetIsValid() {
		t.Errorf("Expected nDto.isValid == 'true'. Instead, got %v", dec.GetIsValid())
	}

}

func TestNumStrUtility_ConvertNumStrToDecimal_04(t *testing.T) {
	rawStr := "Nothing"
	nsu := NumStrUtility{}

	d2, err := nsu.ConvertNumStrToDecimal(rawStr)

	if err != nil {
		t.Errorf("Error generated by ConvertNumStrToDecimal(rawStr). rawStr= '%v' Error:= %v", rawStr, err.Error())
	}

	f64, _, _ := d2.GetFloat64()

	if f64 != 0.0 {
		t.Errorf("Expected result= 0.0 . Instead, got %v", f64)
	}

}

func TestDecimal_Add_01(t *testing.T) {

	numStr1 := "35.50"
	numStr2 := "35.51"
	expected := "71.01"
	nu := NumStrUtility{}

	dec1, err := nu.ConvertNumStrToDecimal(numStr1)

	if err != nil {
		t.Errorf("Received error from nu.ConvertNumStrToDecimal(numStr1). numStr1= '%v'. Error= %v", numStr1, err)
	}

	dec2, _ := nu.ConvertNumStrToDecimal(numStr2)

	if err != nil {
		t.Errorf("Received error from nu.ConvertNumStrToDecimal(numStr2). numStr2= '%v'. Error= %v", numStr2, err)
	}

	dec3, err := dec1.Add(dec2)

	if err != nil {
		t.Errorf("Received error from dec1.Add(dec2). Error= %v", err)
	}

	if expected != dec3.GetNumStr() {
		t.Errorf("Expected NumStrOut='%v'. Instead, got '%v'", expected, dec3.GetNumStr())
	}

	if !dec3.GetIsValid() {
		t.Error("Expected dec3.isValid='true'. Instead, got 'false'")
	}

}

func TestDecimal_Add_02(t *testing.T) {

	numStr1 := "-35.50"
	numStr2 := "35.51"
	expected := "0.01"

	dec1 := Decimal{}.NewNumStr(numStr1)

	dec2 := Decimal{}.NewNumStr(numStr2)

	dec3, err := dec1.Add(dec2)

	if err != nil {
		t.Errorf("Received error from dec1.Add(dec2). Error= %v", err)
	}

	if expected != dec3.GetNumStr() {
		t.Errorf("Expected NumStrOut='%v'. Instead, got '%v'", expected, dec3.GetNumStr())
	}

	if !dec3.GetIsValid() {
		t.Error("Expected dec3.isValid='true'. Instead, got 'false'")
	}

}

func TestDecimal_Add_03(t *testing.T) {

	numStr1 := "35.50"
	numStr2 := "35.51"
	sub1 := "71.01"
	numStr3 := "0.5"
	sub2 := "71.51"
	numStr4 := "1.00"
	sub3 := "72.51"
	expected := ""

	dec1 := Decimal{}.NewNumStr(numStr1)

	dec2 := Decimal{}.NewNumStr(numStr2)

	dec3, err := dec1.Add(dec2)

	if err != nil {
		t.Errorf("Received error from dec1.Add(dec2). Error= %v", err)
	}

	if !dec3.GetIsValid() {
		t.Error("Expected dec3.isValid='true'. Instead, got 'false'")
	}

	expected = sub1 // 71.01
	if expected != dec3.GetNumStr() {
		t.Errorf("Expected After decy numStr3 NumStrOut='%v'. Instead, got '%v'", expected, dec3.GetNumStr())
	}

	decy := Decimal{}.NewNumStr(numStr3)

	expected = "0.5"
	if expected != decy.GetNumStr() {
		t.Errorf("Expected After decy numStr3 NumStrOut='%v'. Instead, got '%v'", expected, decy.GetNumStr())
	}

	dec4, err := dec3.Add(decy)

	expected = sub2 // 71.51
	if expected != dec4.GetNumStr() {
		t.Errorf("Expected After dec4 numStr3 NumStrOut='%v'. Instead, got '%v'", expected, dec4.GetNumStr())
	}

	dec2.SetNumStr(numStr4)

	expected = "1.00"

	if expected != dec2.GetNumStr() {
		t.Errorf("Expected After reuse of dec2 NumStrOut='%v'. Instead, got '%v'", expected, dec2.GetNumStr())
	}

	// Re-use dec3
	dec3, err = dec4.Add(dec2)

	expected = sub3 // 72.56

	if expected != dec3.GetNumStr() {
		t.Errorf("Expected NumStrOut='%v'. Instead, got '%v'", expected, dec3.GetNumStr())
	}

}

func TestDecimal_Add_04(t *testing.T) {
	numStr1 := "35.50"
	numStr2 := ".5"
	expected := "36.00"

	d1 := Decimal{}

	d1.SetNumStr(numStr1)
	d2 := Decimal{}.NewNumStr(numStr2)

	d3, _ := d2.Add(d1)

	if expected != d3.GetNumStr() {
		t.Errorf("Expected NumStrOut='%v'. Instead, got '%v'", expected, d3.GetNumStr())
	}

}

func TestDecimal_Add_05(t *testing.T) {
	numStr1 := "35.50"
	numStr2 := ".5"
	numStr3 := "1.00"
	numStr4 := "9.32"
	numStr5 := "101.912"
	expected := "148.232"

	d1 := Decimal{}

	d1.SetNumStr(numStr1)
	d2 := Decimal{}.NewNumStr(numStr2)

	d3, _ := d2.Add(d1)

	d2.SetNumStr(numStr3)
	d3, _ = d3.Add(d2)

	d2.SetNumStr(numStr4)
	d3, _ = d3.Add(d2)

	d2.SetNumStr(numStr5)
	d3, _ = d3.Add(d2)

	if expected != d3.GetNumStr() {
		t.Errorf("Expected NumStrOut='%v'. Instead, got '%v'", expected, d3.GetNumStr())
	}

}

func TestDecimal_AddToThis_01(t *testing.T) {

	nStrAry := []string{
		"35.50",
		"36.50",
		"5.5",
		"92.75",
	}

	expected := "170.25"

	d := Decimal{}.NewNumStr("0")

	for i := 0; i < len(nStrAry); i++ {
		dx := Decimal{}
		dx.SetNumStr(nStrAry[i])
		d.AddToThis(dx)
	}

	if expected != d.GetNumStr() {
		t.Errorf("Expected NumStrOut='%v'. Instead, got '%v'", expected, d.GetNumStr())
	}

}

func TestDecimal_AddToThis_02(t *testing.T) {

	nStrAry := []string{
		"35.50",
		"36.50",
		"5.5",
		"92.75",
	}

	expected := "170.25"

	d := Decimal{}.New()

	for i := 0; i < len(nStrAry); i++ {
		dx := Decimal{}
		dx.SetNumStr(nStrAry[i])
		d.AddToThis(dx)
	}

	if expected != d.GetNumStr() {
		t.Errorf("Expected NumStrOut='%v'. Instead, got '%v'", expected, d.GetNumStr())
	}

}

func TestDecimal_AddToThis_03(t *testing.T) {

	nStrAry := []string{
		"35.50",
		"36.50",
		"5.5",
		"92.75",
	}

	expected := "320.25"

	d := Decimal{}.NewNumStr("150")

	for i := 0; i < len(nStrAry); i++ {
		dx := Decimal{}
		dx.SetNumStr(nStrAry[i])
		d.AddToThis(dx)
	}

	if expected != d.GetNumStr() {
		t.Errorf("Expected NumStrOut='%v'. Instead, got '%v'", expected, d.GetNumStr())
	}

}

func TestDecimal_AddToThisArray_01(t *testing.T) {
	ePrecision := 4
	eSignVal := 1
	expected:= "68139.6265"
	base := Decimal{}.NewNumStr("25.72")

	d:= [] Decimal { Decimal{}.NewNumStr("351.7"),
		Decimal{}.NewNumStr("6224.894"),
		Decimal{}.NewNumStr("34.8"),
		Decimal{}.NewNumStr("150"),
		Decimal{}.NewNumStr("150726.9"),
		Decimal{}.NewNumStr("-89421.6175"),
		Decimal{}.NewNumStr("47.23"),
	}

	err:= base.AddToThisArray(d)

	if err!=nil {
		t.Errorf("Received error from base.AddToThisArray(d). Error= %v", err)
	}

	if expected != base.GetNumStr() {
		t.Errorf("Expected NumStr== %v . Instead, NumStr== %v .", expected, base.GetNumStr())
	}

	if ePrecision != base.GetPrecision() {
		t.Errorf("Expected Precision== %v . Instead, Precision== %v .", ePrecision, base.GetPrecision())
	}

	if eSignVal != base.GetSign() {
		t.Errorf("Expected Sign Value == %v . Instead, Sign Value == %v .", eSignVal, base.GetSign())
	}

}

func TestDecimal_AddToThisArray_02(t *testing.T) {
	ePrecision := 4
	eSignVal := -1
	expected:= "-233314.1735"
	base := Decimal{}.NewNumStr("25.72")

	d:= [] Decimal { Decimal{}.NewNumStr("351.7"),
		Decimal{}.NewNumStr("6224.894"),
		Decimal{}.NewNumStr("34.8"),
		Decimal{}.NewNumStr("150"),
		Decimal{}.NewNumStr("-150726.9"),
		Decimal{}.NewNumStr("-89421.6175"),
		Decimal{}.NewNumStr("47.23"),
	}

	err:= base.AddToThisArray(d)

	if err!=nil {
		t.Errorf("Received error from base.AddToThisArray(d). Error= %v", err)
	}

	if expected != base.GetNumStr() {
		t.Errorf("Expected NumStr== %v . Instead, NumStr== %v .", expected, base.GetNumStr())
	}

	if ePrecision != base.GetPrecision() {
		t.Errorf("Expected Precision== %v . Instead, Precision== %v .", ePrecision, base.GetPrecision())
	}

	if eSignVal != base.GetSign() {
		t.Errorf("Expected Sign Value == %v . Instead, Sign Value == %v .", eSignVal, base.GetSign())
	}

}

func TestDecimal_AddToThisMultiple_01(t *testing.T) {

	ePrecision := 3
	eSignVal := 1

	base := Decimal{}.NewNumStr("25.72")

	d1:= Decimal{}.NewNumStr("150")
	d2:= Decimal{}.NewNumStr("650.25")
	d3:= Decimal{}.NewNumStr("20.625")
	d4:= Decimal{}.NewNumStr("-16.59")

	err := base.AddToThisMultiple(d1, d2, d3, d4)

	if err!=nil {
		t.Errorf("Received error from base.AddToThisMultiple(d1, d2, d3, d4). Error= %v", err)
	}

	expected := "830.005"

	if expected != base.GetNumStr() {
		t.Errorf("Expected NumStr== %v . Instead, NumStr== %v .", expected, base.GetNumStr())
	}

	if ePrecision != base.GetPrecision() {
		t.Errorf("Expected Precision== %v . Instead, Precision== %v .", ePrecision, base.GetPrecision())
	}

	if eSignVal != base.GetSign() {
		t.Errorf("Expected Sign Value == %v . Instead, Sign Value == %v .", eSignVal, base.GetSign())
	}

}

func TestDecimal_AddToThisMultiple_02(t *testing.T) {

	ePrecision := 3
	eSignVal := -1

	base := Decimal{}.NewNumStr("25.72")

	d1:= Decimal{}.NewNumStr("150")
	d2:= Decimal{}.NewNumStr("-6050.25")
	d3:= Decimal{}.NewNumStr("20.625")
	d4:= Decimal{}.NewNumStr("-16.59")

	base.AddToThisMultiple(d1, d2, d3, d4)

	expected := "-5870.495"

	if expected != base.GetNumStr() {
		t.Errorf("Expected NumStr== %v . Instead, NumStr== %v .", expected, base.GetNumStr())
	}

	if ePrecision != base.GetPrecision() {
		t.Errorf("Expected Precision== %v . Instead, Precision== %v .", ePrecision, base.GetPrecision())
	}

	if eSignVal != base.GetSign() {
		t.Errorf("Expected Sign Value == %v . Instead, Sign Value == %v .", eSignVal, base.GetSign())
	}

}

func TestDecimal_Mul_01(t *testing.T) {

	str1 := "575.63"
	str2 := "2014.123"
	expected := "1159389.62249"

	d1 := Decimal{}.New()

	err := d1.SetNumStr(str1)

	if err != nil {
		t.Errorf("Error thrown on d1.SetNumStr(str1). str1= '%v' Error= %v", str1, err)
	}

	d2 := Decimal{}.New()

	err = d2.SetNumStr(str2)

	if err != nil {
		t.Errorf("Error thrown on d1.SetNumStr(str2). str1= '%v' Error= %v", str2, err)
	}

	d3, err := d1.Mul(d2)

	if err != nil {
		t.Errorf("Error thrown on d1.Mul(d2). Error= %v", err)
	}

	if d3.GetNumStr() != expected {
		t.Errorf("Error. Expected %v. Instead, got %v", expected, d3.GetNumStr())
	}

}

func TestDecimal_Mul_02(t *testing.T) {

	str1 := "-575.63"
	str2 := "2014.123"
	expected := "-1159389.62249"

	d1 := Decimal{}.New()

	err := d1.SetNumStr(str1)

	if err != nil {
		t.Errorf("Error thrown on d1.SetNumStr(str1). str1= '%v' Error= %v", str1, err)
	}

	d2 := Decimal{}.New()

	err = d2.SetNumStr(str2)

	if err != nil {
		t.Errorf("Error thrown on d1.SetNumStr(str2). str1= '%v' Error= %v", str2, err)
	}

	d3, err := d1.Mul(d2)

	if err != nil {
		t.Errorf("Error thrown on d1.Mul(d2). Error= %v", err)
	}

	if expected != d3.GetNumStr() {
		t.Errorf("Error. Expected %v. Instead, got %v", expected, d3.GetNumStr())
	}

}
func TestDecimal_Mul_03(t *testing.T) {

	str1 := "-575.63"
	str2 := "-2014.123"
	expected := "1159389.62249"

	d1 := Decimal{}.New()

	err := d1.SetNumStr(str1)

	if err != nil {
		t.Errorf("Error thrown on d1.SetNumStr(str1). str1= '%v' Error= %v", str1, err)
	}

	d2 := Decimal{}.New()

	err = d2.SetNumStr(str2)

	if err != nil {
		t.Errorf("Error thrown on d1.SetNumStr(str2). str1= '%v' Error= %v", str2, err)
	}

	d3, err := d1.Mul(d2)

	if err != nil {
		t.Errorf("Error thrown on d1.Mul(d2). Error= %v", err)
	}

	if expected != d3.GetNumStr() {
		t.Errorf("Error. Expected %v. Instead, got %v", expected, d3.GetNumStr())
	}

}

func TestDecimal_MulTotal_01(t *testing.T) {
	numStr := "3"
	mul := Decimal{}.NewNumStr(numStr)

	d := Decimal{}.NewNumStr("1")

	for i := 0; i < 4; i++ {
		d.MulTotal(mul)
	}

	expected := "81"

	if expected != d.GetNumStr() {
		t.Errorf("Error. Expected %v. Instead, got %v", expected, d.GetNumStr())
	}

}

func TestDecimal_Divide_01(t *testing.T) {

	str1 := "575.63"
	str2 := "2014.123"
	expected := "0.28579684557497233287"
	//actual   := "0.28579684557497231356"

	d1 := Decimal{}.New()

	err := d1.SetNumStr(str1)

	if err != nil {
		t.Errorf("Error thrown by d1.SetNumStr(str1). str1= '%v' Error= %v", str1, err)
	}

	d2 := Decimal{}.New()

	err = d2.SetNumStr(str2)

	if err != nil {
		t.Errorf("Error thrown by d2.SetNumStr(str2). str2= '%v' Error= %v", str2, err)
	}

	d3, err := d1.Divide(d2, 20)

	if err != nil {
		t.Errorf("Error thrown by d1.Divide(d2, 20).  Error= %v", err)
	}

	outNumStr, _ := d3.GetBigFloatString(uint(d3.GetPrecision()))

	if outNumStr != expected {
		t.Errorf("Expected Quotient %v. Instead, got %v", expected, outNumStr)
	}

}

func TestDecimal_GetAbsoluteAllDigitsStr_01(t *testing.T) {
	str1 := "-123456.123456"
	expected := "123456123456"
	d := Decimal{}.New()
	d.SetNumStr(str1)

	absStr, err := d.GetAbsoluteAllDigitsStr()

	if err != nil {
		t.Errorf("d.GetAbsoluteAllDigitsStr() returned an Error. Error= %v", err)
	}

	if absStr != expected {
		t.Errorf("Expected %v. Instead, got %v", expected, absStr)
	}

}

func TestDecimal_GetAbsoluteAllDigitsStr_02(t *testing.T) {
	str1 := "123456.123456"
	expected := "123456123456"
	d := Decimal{}.New()
	d.SetNumStr(str1)

	absStr, err := d.GetAbsoluteAllDigitsStr()

	if err != nil {
		t.Errorf("d.GetAbsoluteAllDigitsStr() returned an Error. Error= %v", err)
	}

	if absStr != expected {
		t.Errorf("Expected %v. Instead, got %v", expected, absStr)
	}

}

func TestDecimal_GetAbsoluteValue_01(t *testing.T) {
	str1 := "-123456.123456"
	expected := "123456.123456"

	d := Decimal{}.New()

	err := d.SetNumStr(str1)

	if err != nil {
		t.Errorf("Error returned from NewNumStr(str1). str1='%v' Error= %v", str1, err)
	}

	dAbs, err := d.GetAbsoluteValue()

	if err != nil {
		t.Errorf("Error returned from d.GetAbsoluteValue(). Error= %v", err)
	}

	if expected != dAbs.GetNumStr() {
		t.Errorf("Expected absolute value = '%v'. Instead, got '%v'.", expected, dAbs.GetNumStr())
	}

}

func TestDecimal_GetAbsoluteValue_02(t *testing.T) {
	str1 := "123456.123456"
	expected := "123456.123456"

	d := Decimal{}.New()

	err := d.SetNumStr(str1)

	if err != nil {
		t.Errorf("Error returned from NewNumStr(str1). str1='%v' Error= %v", str1, err)
	}

	dAbs, err := d.GetAbsoluteValue()

	if err != nil {
		t.Errorf("Error returned from d.GetAbsoluteValue(). Error= %v", err)
	}

	if expected != dAbs.GetNumStr() {
		t.Errorf("Expected absolute value = '%v'. Instead, got '%v'.", expected, dAbs.GetNumStr())
	}

}

func TestDecimal_GetIntAry_01(t *testing.T) {
	bigI := big.NewInt(int64(123456123456))
	precision := uint(6)
	exStr := "123456.123456"
	d := Decimal{}.NewBigInt(bigI, precision)
	signVal := 1

	ia, err := d.GetIntAry()

	if err != nil {
		t.Errorf("Error returned from d.GetIntAry(). Error= %v ", err)
	}

	if exStr != ia.GetNumStr() {
		t.Errorf("Expected ia.GetNumStr()== %v .  Instead ia.GetNumStr() == %v ", exStr, ia.GetNumStr())
	}

	if int(precision) != ia.GetPrecision() {
		t.Errorf("Expected ia.Precsion== %v .   Instead, ia.Precision== %v", precision, ia.GetPrecision())
	}

	if signVal != ia.GetSign() {
		t.Errorf("Expected ia.SignVal== %v .   Instead, ia.SignVal== %v", signVal, ia.GetSign())
	}

}

func TestDecimal_GetIntAry_02(t *testing.T) {
	bigI := big.NewInt(int64(-123456123456))
	precision := uint(6)
	exStr := "-123456.123456"
	d := Decimal{}.NewBigInt(bigI, precision)
	signVal := -1

	ia, err := d.GetIntAry()

	if err != nil {
		t.Errorf("Error returned from d.GetIntAry(). Error= %v ", err)
	}

	if exStr != ia.GetNumStr() {
		t.Errorf("Expected ia.GetNumStr()== %v .  Instead ia.GetNumStr() == %v ", exStr, ia.GetNumStr())
	}

	if int(precision) != ia.GetPrecision() {
		t.Errorf("Expected ia.Precsion== %v .   Instead, ia.Precision== %v", precision, ia.GetPrecision())
	}

	if signVal != ia.GetSign() {
		t.Errorf("Expected ia.SignVal== %v .   Instead, ia.SignVal== %v", signVal, ia.GetSign())
	}

}

func TestDecimal_GetNthRoot_01(t *testing.T) {
	numStr1 := "125"
	nthRoot := uint(5)
	maxPrecision := uint(14)
	expected := "2.62652780440377"
	eSignVal := 1

	d1 := Decimal{}.NewNumStr(numStr1)

	d2, err := d1.GetNthRoot(nthRoot, maxPrecision)

	if err != nil {
		t.Errorf("Error returned from d1.GetNthRoot(nthRoot, maxPrecision). Error= %v ", err)
	}

	if expected != d2.GetNumStr() {
		t.Errorf("Expected NumStr: %v. Instead, got %v", expected, d2.GetNumStr())
	}

	if eSignVal != d2.GetSign() {
		t.Errorf("Expected Sign Value= '%v'. Instead, got Sign Value= '%v' ", eSignVal, d2.GetSign())
	}

	if int(maxPrecision) != d2.GetPrecision() {
		t.Errorf("Expected precision= '%v'. Instead, got precision= '%v' ", maxPrecision, d2.GetPrecision())
	}

}

func TestDecimal_GetNthRoot_02(t *testing.T) {
	numStr1 := "5604423"
	nthRoot := uint(6)
	maxPrecision := uint(13)
	expected := "13.3276982415963"
	eSignVal := 1

	d1 := Decimal{}.NewNumStr(numStr1)

	d2, err := d1.GetNthRoot(nthRoot, maxPrecision)

	if err != nil {
		t.Errorf("Error returned from d1.GetNthRoot(nthRoot, maxPrecision). Error= %v ", err)
	}

	if expected != d2.GetNumStr() {
		t.Errorf("Expected NumStr: %v. Instead, got %v", expected, d2.GetNumStr())
	}

	if eSignVal != d2.GetSign() {
		t.Errorf("Expected Sign Value= '%v'. Instead, got Sign Value= '%v' ", eSignVal, d2.GetSign())
	}

	if int(maxPrecision) != d2.GetPrecision() {
		t.Errorf("Expected precision= '%v'. Instead, got precision= '%v' ", maxPrecision, d2.GetPrecision())
	}

}

func TestDecimal_GetNthRoot_03(t *testing.T) {
	numStr1 := "5604423.924"
	nthRoot := uint(6)
	maxPrecision := uint(13)
	expected := "13.3276986078187"
	eSignVal := 1

	d1 := Decimal{}.NewNumStr(numStr1)

	d2, err := d1.GetNthRoot(nthRoot, maxPrecision)

	if err != nil {
		t.Errorf("Error returned from d1.GetNthRoot(nthRoot, maxPrecision). Error= %v ", err)
	}

	if expected != d2.GetNumStr() {
		t.Errorf("Expected NumStr: %v. Instead, got %v", expected, d2.GetNumStr())
	}

	if eSignVal != d2.GetSign() {
		t.Errorf("Expected Sign Value= '%v'. Instead, got Sign Value= '%v' ", eSignVal, d2.GetSign())
	}

	if int(maxPrecision) != d2.GetPrecision() {
		t.Errorf("Expected precision= '%v'. Instead, got precision= '%v' ", maxPrecision, d2.GetPrecision())
	}

}

func TestDecimal_GetNthRoot_04(t *testing.T) {
	numStr1 := "-27"
	nthRoot := uint(3)
	maxPrecision := uint(2)
	expected := "-3.00"
	eSignVal := -1

	d1 := Decimal{}.NewNumStr(numStr1)

	d2, err := d1.GetNthRoot(nthRoot, maxPrecision)

	if err != nil {
		t.Errorf("Error returned from d1.GetNthRoot(nthRoot, maxPrecision). Error= %v ", err)
	}

	if expected != d2.GetNumStr() {
		t.Errorf("Expected NumStr: %v. Instead, got %v", expected, d2.GetNumStr())
	}

	if eSignVal != d2.GetSign() {
		t.Errorf("Expected Sign Value= '%v'. Instead, got Sign Value= '%v' ", eSignVal, d2.GetSign())
	}

	if int(maxPrecision) != d2.GetPrecision() {
		t.Errorf("Expected precision= '%v'. Instead, got precision= '%v' ", maxPrecision, d2.GetPrecision())
	}

}

func TestDecimal_GetNthRoot_05(t *testing.T) {
	numStr1 := "-27"
	nthRoot := uint(4)
	maxPrecision := uint(2)

	d1 := Decimal{}.NewNumStr(numStr1)

	_, err := d1.GetNthRoot(nthRoot, maxPrecision)

	if err == nil {
		t.Error("Expected Error from d1.GetNthRoot(nthRoot, maxPrecision) for negative number with even nthRoot. No Error triggered")
	}


}

func TestDecimal_GetRelevantPrecision(t *testing.T) {
	str1 := "-2.0105000"
	expected := uint(4)
	d1 := Decimal{}.NewNumStr(str1)

	rP := d1.GetRelevantPrecision()

	if rP != expected {
		t.Errorf("Expected Relevant Precision = %v. Instead, got %v", expected, rP)
	}

}

func TestDecimal_GetSquareRoot_01(t *testing.T) {
	numStr1 := "2686.5"
	maxPrecision := uint(30)
	expected := "51.831457629512986714934518985668"
	eSignVal := 1

	d1 := Decimal{}.NewNumStr(numStr1)

	d2, err := d1.GetSquareRoot(maxPrecision)

	if err != nil {
		t.Errorf("Error returned from d1.GetSquareRoot(maxPrecision). Error = %v ", err)
	}

	if expected != d2.GetNumStr() {
		t.Errorf("Expected NumStr: %v. Instead, got %v", expected, d2.GetNumStr())
	}

	if eSignVal != d2.GetSign() {
		t.Errorf("Expected Sign Value= '%v'. Instead, got Sign Value= '%v' ", eSignVal, d2.GetSign())
	}

	if int(maxPrecision) != d2.GetPrecision() {
		t.Errorf("Expected precision= '%v'. Instead, got precision= '%v' ", maxPrecision, d2.GetPrecision())
	}
}

func TestDecimal_GetSquareRoot_02(t *testing.T) {
	numStr1 := "390626"
	maxPrecision := uint(29)
	expected := "625.00079999948800065535895142588"
	eSignVal := 1

	d1 := Decimal{}.NewNumStr(numStr1)

	d2, err := d1.GetSquareRoot(maxPrecision)

	if err != nil {
		t.Errorf("Error returned from d1.GetSquareRoot(maxPrecision). Error = %v ", err)
	}

	if expected != d2.GetNumStr() {
		t.Errorf("Expected NumStr: %v. Instead, got %v", expected, d2.GetNumStr())
	}

	if eSignVal != d2.GetSign() {
		t.Errorf("Expected Sign Value= '%v'. Instead, got Sign Value= '%v' ", eSignVal, d2.GetSign())
	}

	if int(maxPrecision) != d2.GetPrecision() {
		t.Errorf("Expected precision= '%v'. Instead, got precision= '%v' ", maxPrecision, d2.GetPrecision())
	}
}

func TestDecimal_GetSquareRoot_03(t *testing.T) {
	numStr1 := "-390626"
	maxPrecision := uint(29)

	d1 := Decimal{}.NewNumStr(numStr1)

	_, err := d1.GetSquareRoot(maxPrecision)

	if err == nil {
		t.Error("It was expected that an error would be generated when attempting to calculate the square root of a negative number. However, no such error was triggered!")
	}

}

func TestDecimal_NewBigInt_01(t *testing.T) {

	bigI := big.NewInt(int64(123456123456))
	precision := uint(6)
	expected := "123456.123456"
	d := Decimal{}.NewBigInt(bigI, precision)

	if expected != d.GetNumStr() {
		t.Errorf("Expected NumStr: %v. Instead, got %v", expected, d.GetNumStr())
	}

}

func TestDecimal_NewI64_01(t *testing.T) {

	i64 := int64(123456)
	precision := uint(3)
	expected := "123.456"
	d := Decimal{}.NewI64(i64, precision)

	if expected != d.GetNumStr() {
		t.Errorf("Expected NumStr: %v. Instead, got %v", expected, d.GetNumStr())
	}

}

func TestDecimal_NewInt_01(t *testing.T) {
	iNum := int(123456)
	precision := uint(3)
	expected := "123.456"
	d := Decimal{}.NewInt(iNum, precision)

	if expected != d.GetNumStr() {
		t.Errorf("Expected NumStr: %v. Instead, got %v", expected, d.GetNumStr())
	}
}

func TestDecimal_NewNumStr_01(t *testing.T) {
	inStr := "123.456"
	expected := "123.456"
	d := Decimal{}.NewNumStr(inStr)

	if expected != d.GetNumStr() {
		t.Errorf("Expected NumStr: %v. Instead, got %v", expected, d.GetNumStr())
	}

}

func TestDecimal_NewNumStr_02(t *testing.T) {

	inStr := "123456"
	expected := "123456"
	d := Decimal{}.NewNumStr(inStr)

	if expected != d.GetNumStr() {
		t.Errorf("Expected NumStr: %v. Instead, got %v", expected, d.GetNumStr())
	}

}

func TestDecimal_NewNumStr_03(t *testing.T) {

	inStr := "-123456"
	expected := "-123456"
	d := Decimal{}.NewNumStr(inStr)

	if expected != d.GetNumStr() {
		t.Errorf("Expected NumStr: %v. Instead, got %v", expected, d.GetNumStr())
	}

}

func TestDecimal_NewNumStr_04(t *testing.T) {

	inStr := "-123.456"
	expected := "-123.456"
	d := Decimal{}.NewNumStr(inStr)

	if expected != d.GetNumStr() {
		t.Errorf("Expected NumStr: %v. Instead, got %v", expected, d.GetNumStr())
	}

}

func TestDecimal_NewNumStrPrecision_01(t *testing.T) {
	nStr := "123456"
	precision := uint(3)
	expected := "123456.000"

	d, err := Decimal{}.NewNumStrPrecision(nStr, precision, true)

	if err != nil {
		t.Errorf("Error Returned from Decimal.NewNumStrPrecision(nStr, precision, false). inStr= '%v' precision= '%v' Error= %v", nStr, precision, err)
	}

	if expected != d.GetNumStr() {
		t.Errorf("Expected NumStr: %v. Instead, got %v", expected, d.GetNumStr())
	}

}

func TestDecimal_NewNumStrPrecision_02(t *testing.T) {

	numStr := "0"
	expected := "0.00"

	precision := uint(2)

	d1, err := Decimal{}.NewNumStrPrecision(numStr, precision, false)

	if err != nil {
		t.Errorf("Error Returned from Decimal.NewNumStrPrecision(numStr, precision, false). inStr= '%v' precision= '%v' Error= %v", numStr, precision, err)
	}

	if expected != d1.GetNumStr() {
		t.Errorf("Expected NumStr: %v. Instead, got %v", expected, d1.GetNumStr())
	}

}
func TestDecimal_NewNumStrPrecision_03(t *testing.T) {

	numStr := "125"
	expected := "125"

	precision := uint(0)

	d1, err := Decimal{}.NewNumStrPrecision(numStr, precision, false)

	if err != nil {
		t.Errorf("Error Returned from Decimal.NewNumStrPrecision(numStr, precision, false). inStr= '%v' precision= '%v' Error= %v", numStr, precision, err)
	}

	if expected != d1.GetNumStr() {
		t.Errorf("Expected NumStr: %v. Instead, got %v", expected, d1.GetNumStr())
	}

}

func TestDecimal_NewNumStrPrecision_04(t *testing.T) {
	inStr := "-123.456"
	expected := "-123.4560"
	precision := uint(4)
	d, err := Decimal{}.NewNumStrPrecision(inStr, precision, false)

	if err != nil {
		t.Errorf("Error Returned from Decimal.NewNumStrPrecision(inStr, precision, false). inStr= '%v' precision= '%v' Error= %v", inStr, precision, err)
	}

	if expected != d.GetNumStr() {
		t.Errorf("Expected NumStr: %v. Instead, got %v", expected, d.GetNumStr())
	}


	if int(precision) != d.GetPrecision() {
		t.Errorf("Expected precision= '%v'. Instead, got precision= '%v'", precision, d.GetPrecision())
	}

}

func TestDecimal_NewNumStrPrecision_06(t *testing.T) {
	inStr := "123.456"
	expected := "123.4560"
	precision := uint(4)

	d, err := Decimal{}.NewNumStrPrecision(inStr, precision, false)

	if err != nil {
		t.Errorf("Error Returned from Decimal.NewNumStrPrecision(inStr, precision, false). inStr= '%v' precision= '%v' Error= %v", inStr, precision, err)
	}

	if expected != d.GetNumStr() {
		t.Errorf("Expected NumStr: %v. Instead, got %v", expected, d.GetNumStr())
	}

}

func TestDecimal_NumStrToDecimal_01(t *testing.T) {
	d1 := Decimal{}.New()

	numStr1 := "123456"

	d2, err := d1.NumStrToDecimal(numStr1)

	if err != nil {
		t.Errorf("Received error from d1.NumStrToDecimal(numStr1). numStr1:= %v", numStr1)
	}

	expected := numStr1

	if expected != d2.GetNumStr() {
		t.Errorf("Expected NumStr: %v. Instead, got %v", expected, d2.GetNumStr())
	}

}

func TestDecimal_NumStrToDecimal_02(t *testing.T) {
	d1 := Decimal{}.New()

	numStr1 := "12345.6"

	d2, err := d1.NumStrToDecimal(numStr1)

	if err != nil {
		t.Errorf("Received error from d1.NumStrToDecimal(numStr1). numStr1:= %v", numStr1)
	}

	expected := numStr1

	if expected != d2.GetNumStr() {
		t.Errorf("Expected NumStr: %v. Instead, got %v", expected, d2.GetNumStr())
	}

}

func TestDecimal_NumStrToDecimal_03(t *testing.T) {
	d1 := Decimal{}.New()

	numStr1 := "-123456"

	d2, err := d1.NumStrToDecimal(numStr1)

	if err != nil {
		t.Errorf("Received error from d1.NumStrToDecimal(numStr1). numStr1:= %v", numStr1)
	}

	expected := numStr1

	if expected != d2.GetNumStr() {
		t.Errorf("Expected NumStr: %v. Instead, got %v", expected, d2.GetNumStr())
	}

}

func TestDecimal_NumStrToDecimal_04(t *testing.T) {
	d1 := Decimal{}.New()

	numStr1 := "-12345.6"

	d2, err := d1.NumStrToDecimal(numStr1)

	if err != nil {
		t.Errorf("Received error from d1.NumStrToDecimal(numStr1). numStr1:= %v", numStr1)
	}

	expected := numStr1

	if expected != d2.GetNumStr() {
		t.Errorf("Expected NumStr: %v. Instead, got %v", expected, d2.GetNumStr())
	}

}

func TestDecimal_NumStrPrecisionToDecimal_01(t *testing.T) {
	inStr := "123.456789"
	precision := uint(3)
	expected := "123.457"
	eSignVal := 1

	d := Decimal{}
	d1, err := d.NumStrPrecisionToDecimal(inStr, precision, true)

	if err != nil {
		t.Errorf("Error returned from d.NumStrPrecisionToDecimal(inStr, precision). inStr='%v' precision= %v Error= %v  \n", inStr, precision, err)
	}

	if expected != d1.GetNumStr() {
		t.Errorf("Expected NumStr: %v. Instead, got %v", expected, d1.GetNumStr())
	}

	if eSignVal != d1.GetSign() {
		t.Errorf("Expected Sign Value= '%v'. Instead, got Sign Value= '%v' ", eSignVal, d1.GetSign())
	}


	if int(precision) != d1.GetPrecision() {
		t.Errorf("Expected precision= '%v'. Instead, got precision= '%v' ", precision, d1.GetPrecision())
	}

}

func TestDecimal_NumStrPrecisionToDecimal_02(t *testing.T) {

	inStr := "123456789"
	expected := "123456.789"
	eSignVal := 1
	precision := uint(3)

	d1, err := Decimal{}.NewPtr().NumStrPrecisionToDecimal(inStr, precision, true)

	if err != nil {
		t.Errorf("Error returned from d.NumStrPrecisionToDecimal(inStr, precision). inStr='%v' precision= %v Error= %v  \n", inStr, precision, err)
	}

	if expected != d1.GetNumStr() {
		t.Errorf("Expected NumStr: %v. Instead, got %v", expected, d1.GetNumStr())
	}


	if eSignVal != d1.GetSign() {
		t.Errorf("Expected Sign Value= '%v'. Instead, got Sign Value= '%v' ", eSignVal, d1.GetSign())
	}

	if int(precision) != d1.GetPrecision() {
		t.Errorf("Expected precision= '%v'. Instead, got precision= '%v' ", precision, d1.GetPrecision())
	}

}

func TestDecimal_NumStrPrecisionToDecimal_03(t *testing.T) {

	inStr := "123456789"
	expected := "0.123456789"
	eSignVal := 1

	precision := uint(9)
	d1, err := Decimal{}.NewPtr().NumStrPrecisionToDecimal(inStr, precision, false)

	if err != nil {
		t.Errorf("Error returned from d.NumStrPrecisionToDecimal(inStr, precision). inStr='%v' precision= %v Error= %v  \n", inStr, precision, err)
	}

	if expected != d1.GetNumStr() {
		t.Errorf("Expected NumStr: %v. Instead, got %v", expected, d1.GetNumStr())
	}

	if eSignVal != d1.GetSign() {
		t.Errorf("Expected Sign Value= '%v'. Instead, got Sign Value= '%v' ", eSignVal, d1.GetSign())
	}

	if int(precision) != d1.GetPrecision() {
		t.Errorf("Expected precision= '%v'. Instead, got precision= '%v' ", precision, d1.GetPrecision())
	}

}

func TestDecimal_NumStrPrecisionToDecimal_04(t *testing.T) {

	inStr := "123456789"
	expected := "0.0123456789"
	eSignVal := 1

	d := Decimal{}
	precision := uint(10)
	d1, err := d.NumStrPrecisionToDecimal(inStr, precision, false)

	if err != nil {
		t.Errorf("Error returned from d.NumStrPrecisionToDecimal(inStr, precision). inStr='%v' precision= %v Error= %v  \n", inStr, precision, err)
	}

	if expected != d1.GetNumStr() {
		t.Errorf("Expected NumStr: %v. Instead, got %v", expected, d1.GetNumStr())
	}

	if eSignVal != d1.GetSign() {
		t.Errorf("Expected Sign Value= '%v'. Instead, got Sign Value= '%v' ", eSignVal, d1.GetSign())
	}

	if int(precision) != d1.GetPrecision() {
		t.Errorf("Expected precision= '%v'. Instead, got precision= '%v' ", precision, d1.GetPrecision())
	}

}

func TestDecimal_NumStrPrecisionToDecimal_05(t *testing.T) {

	inStr := "-123456789"
	expected := "-0.0123456789"
	eSignVal := -1

	d := Decimal{}
	precision := uint(10)
	d1, err := d.NumStrPrecisionToDecimal(inStr, precision, false)

	if err != nil {
		t.Errorf("Error returned from d.NumStrPrecisionToDecimal(inStr, precision). inStr='%v' precision= %v Error= %v  \n", inStr, precision, err)
	}

	if expected != d1.GetNumStr() {
		t.Errorf("Expected NumStr: %v. Instead, got %v", expected, d1.GetNumStr())
	}

	if eSignVal != d1.GetSign() {
		t.Errorf("Expected Sign Value= '%v'. Instead, got Sign Value= '%v' ", eSignVal, d1.GetSign())
	}

	if int(precision) != d1.GetPrecision() {
		t.Errorf("Expected precision= '%v'. Instead, got precision= '%v' ", precision, d1.GetPrecision())
	}

}

func TestDecimal_NumStrPrecisionToDecimal_06(t *testing.T) {

	inStr := "-123456.789"
	expected := "-123.456789"
	eSignVal := -1
	d := Decimal{}
	precision := uint(6)
	d1, err := d.NumStrPrecisionToDecimal(inStr, precision, false)

	if err != nil {
		t.Errorf("Error returned from d.NumStrPrecisionToDecimal(inStr, precision). inStr='%v' precision= %v Error= %v  \n", inStr, precision, err)
	}


	if expected != d1.GetNumStr() {
		t.Errorf("Expected NumStr: %v. Instead, got %v", expected, d1.GetNumStr())
	}

	if eSignVal != d1.GetSign() {
		t.Errorf("Expected Sign Value= '%v'. Instead, got Sign Value= '%v' ", eSignVal, d1.GetSign())
	}

	if int(precision) != d1.GetPrecision() {
		t.Errorf("Expected precision= '%v'. Instead, got precision= '%v' ", precision, d1.GetPrecision())
	}

}

func TestDecimal_NumStrPrecisionToDecimal_07(t *testing.T) {

	inStr := "5"
	expected := "0.5"
	precision := uint(1)
	eSignVal := 1

	d := Decimal{}
	d1, err := d.NumStrPrecisionToDecimal(inStr, precision, false)

	if err != nil {
		t.Errorf("Error returned from d.NumStrPrecisionToDecimal(inStr, precision). inStr='%v' precision= %v Error= %v  \n", inStr, precision, err)
	}

	if expected != d1.GetNumStr() {
		t.Errorf("Expected NumStr: %v. Instead, got %v", expected, d1.GetNumStr())
	}

	if eSignVal != d1.GetSign() {
		t.Errorf("Expected Sign Value= '%v'. Instead, got Sign Value= '%v' ", eSignVal, d1.GetSign())
	}

	if int(precision) != d1.GetPrecision() {
		t.Errorf("Expected precision= '%v'. Instead, got precision= '%v' ", precision, d1.GetPrecision())
	}
}

func TestDecimal_NumStrPrecisionToDecimal_08(t *testing.T) {

	inStr := "0.5"
	expected := "0.5"
	precision := uint(1)
	eSignVal := 1

	d := Decimal{}
	d1, err := d.NumStrPrecisionToDecimal(inStr, precision, false)

	if err != nil {
		t.Errorf("Error returned from d.NumStrPrecisionToDecimal(inStr, precision). inStr='%v' precision= %v Error= %v  \n", inStr, precision, err)
	}

	if expected != d1.GetNumStr() {
		t.Errorf("Expected NumStr: %v. Instead, got %v", expected, d1.GetNumStr())
	}


	if eSignVal != d1.GetSign() {
		t.Errorf("Expected Sign Value= '%v'. Instead, got Sign Value= '%v' ", eSignVal, d1.GetSign())
	}

	if int(precision) != d1.GetPrecision() {
		t.Errorf("Expected precision= '%v'. Instead, got precision= '%v' ", precision, d1.GetPrecision())
	}
}

func TestDecimal_NumStrPrecisionToDecimal_09(t *testing.T) {

	inStr := "123456"
	expected := "123.456"
	precision := uint(3)
	eSignVal := 1

	d := Decimal{}
	d1, err := d.NumStrPrecisionToDecimal(inStr, precision, false)

	if err != nil {
		t.Errorf("Error returned from d.NumStrPrecisionToDecimal(inStr, precision). inStr='%v' precision= %v Error= %v  \n", inStr, precision, err)
	}

	if expected != d1.GetNumStr() {
		t.Errorf("Expected NumStr: %v. Instead, got %v", expected, d1.GetNumStr())
	}

	if eSignVal != d1.GetSign() {
		t.Errorf("Expected Sign Value= '%v'. Instead, got Sign Value= '%v' ", eSignVal, d1.GetSign())
	}

	if int(precision) != d1.GetPrecision() {
		t.Errorf("Expected precision= '%v'. Instead, got precision= '%v' ", precision, d1.GetPrecision())
	}

}

func TestDecimal_Subtract_01(t *testing.T) {

	nStr1 := "123456"
	expected := "123455.5"

	precision1 := uint(0)

	d1, err := Decimal{}.NewNumStrPrecision(nStr1, precision1, true)

	if err != nil {
		t.Errorf("Error Returned from Decimal d1.NewNumStrPrecision(nStr1, precision1, false). nStr1= '%v' precision1= '%v' Error= %v", nStr1, precision1, err)
	}

	nStr2 := "0.5"
	precision2 := uint(1)

	d2, err := Decimal{}.NewNumStrPrecision(nStr2, precision2, false)

	if err != nil {
		t.Errorf("Error Returned from Decimal d2.NewNumStrPrecision(nStr2, precision2, false). nStr2= '%v' precision2= '%v' Error= %v", nStr2, precision2, err)
	}

	d3, err := d1.Subtract(d2)

	if err != nil {
		t.Errorf("Error received from Subtract. Error= %v", err)
	}

	if expected != d3.GetNumStr() {
		t.Errorf("Expected NumStr: %v. Instead, got %v", expected, d3.GetNumStr())
	}

}

func TestDecimal_Subtract_02(t *testing.T) {

	nStr1 := "123.222"

	d1 := Decimal{}.NewNumStr(nStr1)

	nStr2 := "-1.2223"

	d2 := Decimal{}.NewNumStr(nStr2)

	d3, err := d1.Subtract(d2)

	if err != nil {
		t.Errorf("Error received from Subtract. Error= %v", err)
	}

	expected := "124.4443"

	if expected != d3.GetNumStr() {
		t.Errorf("Expected NumStr: %v. Instead, got %v", expected, d3.GetNumStr())
	}

}

func TestDecimal_Subtract_03(t *testing.T) {

	nStr1 := "-4"

	d1 := Decimal{}.NewNumStr(nStr1)

	nStr2 := "-2"

	d2 := Decimal{}.NewNumStr(nStr2)

	d3, err := d1.Subtract(d2)

	if err != nil {
		t.Errorf("Error received from Subtract. Error= %v", err)
	}

	expected := "-2"

	if expected != d3.GetNumStr() {
		t.Errorf("Expected NumStr: %v. Instead, got %v", expected, d3.GetNumStr())
	}

}

func TestDecimal_SubtractTotal_01(t *testing.T) {
	nStrAry := []string{
		"5.50",
		"6.50",
		"7.00",
		"8.25",
	}

	d := Decimal{}.NewNumStr("500.00")

	expected := "472.75"

	for i := 0; i < len(nStrAry); i++ {
		dx := Decimal{}.NewNumStr(nStrAry[i])

		d.SubtractTotal(dx)
	}

	if expected != d.GetNumStr() {
		t.Errorf("Expected NumStr: %v. Instead, got %v", expected, d.GetNumStr())
	}

}

func TestDecimal_SubtractTotal_02(t *testing.T) {
	nStrAry := []string{
		"5.50",
		"6.50",
		"7.00",
		"8.25",
	}

	d := Decimal{}.New()

	expected := "-27.25"

	for i := 0; i < len(nStrAry); i++ {
		dx := Decimal{}.NewNumStr(nStrAry[i])

		d.SubtractTotal(dx)
	}

	if expected != d.GetNumStr() {
		t.Errorf("Expected NumStr: %v. Instead, got %v", expected, d.GetNumStr())
	}

}

func TestDecimal_MakeDecimalBigIntPrecision_01(t *testing.T) {
	numStr := "123456123456"
	bigI, isOk := big.NewInt(0).SetString(numStr, 10)

	if !isOk {
		t.Errorf("Failed to convert string to BigInt from numStr='%v'", numStr)
	}

	precision := uint(3)

	d1 := Decimal{}
	d2, err := d1.MakeDecimalBigIntPrecision(bigI, precision)

	if err != nil {
		t.Errorf("Error from MakeDecimalBigIntPrecision. Error:= %v \n", err)
	}

	expected := "123456123.456"

	if expected != d2.GetNumStr() {
		t.Errorf("Expected NumStr: %v. Instead, got %v", expected, d2.GetNumStr())
	}

}

func TestDecimal_MakeDecimalBigIntPrecision_02(t *testing.T) {
	numStr := "0"
	expected := "0.00"
	precision := uint(2)

	bigI, isOk := big.NewInt(0).SetString(numStr, 10)

	if !isOk {
		t.Errorf("Failed to convert string to BigInt from numStr='%v'", numStr)
	}

	d1 := Decimal{}
	d2, err := d1.MakeDecimalBigIntPrecision(bigI, precision)

	if err != nil {
		t.Errorf("Error from MakeDecimalBigIntPrecision. Error:= %v \n", err)
	}

	if expected != d2.GetNumStr() {
		t.Errorf("Expected NumStr: %v. Instead, got %v", expected, d2.GetNumStr())
	}

}

func TestDecimal_MakeDecimalFromIntAry_01(t *testing.T) {

	numStr := "982.123456"
	precision := uint(6)
	signVal := 1

	ia, _ := IntAry{}.NewNumStr(numStr)

	d1 := Decimal{}.New()
	d2, err := d1.MakeDecimalFromIntAry(&ia)

	if err != nil {
		t.Errorf("Error retruned from d1.MakeDecimalFromIntAry(&ia). Error= %v", err)
	}

	if d2.GetNumStr() != ia.GetNumStr() {
		t.Errorf("Expected NumStr== %v .  Instead, NumStr== %v", d2.GetNumStr(), ia.GetNumStr())
	}

	if int(precision) != d2.GetPrecision() {
		t.Errorf("Expected Precision== %v .  Instead, Precision== %v", precision, d2.GetPrecision())
	}

	if signVal != d2.GetSign() {
		t.Errorf("Expected Sign Value== %v .  Instead, Sign Value== %v", signVal, d2.GetSign())
	}

}

func TestDecimal_MakeDecimalFromIntAry_02(t *testing.T) {

	numStr := "-982.123456"
	precision := uint(6)
	signVal := -1

	ia, _ := IntAry{}.NewNumStr(numStr)

	d1 := Decimal{}.New()
	d2, err := d1.MakeDecimalFromIntAry(&ia)

	if err != nil {
		t.Errorf("Error retruned from d1.MakeDecimalFromIntAry(&ia). Error= %v", err)
	}

	if err != nil {
		t.Errorf("Error retruned from d2.GetNumStr(). Error= %v", err)
	}

	if d2.GetNumStr() != ia.GetNumStr() {
		t.Errorf("Expected NumStr== %v .  Instead, NumStr== %v", d2.GetNumStr(), ia.GetNumStr())
	}


	if int(precision) != d2.GetPrecision() {
		t.Errorf("Expected Precision== %v .  Instead, Precision== %v", precision, d2.GetPrecision())
	}

	if signVal != d2.GetSign() {
		t.Errorf("Expected Sign Value== %v .  Instead, Sign Value== %v", signVal, d2.GetSign())
	}

}

func TestDecimal_Pow_01(t *testing.T) {

	numStr := "2.125"
	exp := 5
	d1 := Decimal{}.NewNumStr(numStr)
	d2, err := d1.Pow(exp, 15)

	if err != nil {
		t.Errorf("Received error from d1.Pow(exp). exp='%v' Error= %v", exp, err)
	}

	expected := "43.330596923828125"

	if expected != d2.GetNumStr() {
		t.Errorf("Expected NumStr= '%v'. Instead, got %v.", expected, d2.GetNumStr())
	}

}

func TestDecimal_Pow_02(t *testing.T) {

	numStr := "2.125"
	exp := -5
	d1 := Decimal{}.NewNumStr(numStr)
	d2, err := d1.Pow(exp, 32)

	if err != nil {
		t.Errorf("Received error from d1.Pow(exp). exp='%v' Error= %v", exp, err)
	}

	expected := "0.02307838042845159759046157465153"

	if expected != d2.GetNumStr() {
		t.Errorf("Expected NumStr= '%v'. Instead, got %v.", expected, d2.GetNumStr())
	}

}

func TestDecimal_Pow_03(t *testing.T) {

	numStr := "2.125"
	exp := -5
	d1 := Decimal{}.NewNumStr(numStr)
	d2, err := d1.Pow(exp, 250)

	if err != nil {
		t.Errorf("Received error from d1.Pow(exp). exp='%v' Error= %v", exp, err)
	}

	expected := "0.0230783804284515975904615746515318091892352539727592285702010836302529057503678187310412245740240038257373805953698154109885713843013768287933221444131345621425256205378428954465132756326869536861810731644102187755527493261645362878092652992519669234"

	if expected != d2.GetNumStr() {
		t.Errorf("Expected NumStr= '%v'. Instead, got %v.", expected, d2.GetNumStr())
	}

}

func TestDecimal_Inverse_01(t *testing.T) {

	numStr := "25"
	precision := uint(0)
	expected := "0.04"

	d1, err := Decimal{}.NewNumStrPrecision(numStr, precision, false)

	if err != nil {
		t.Errorf("Error Returned from Decimal d1.NewNumStrPrecision(numStr, precision, false). numStr= '%v' precision= '%v' Error= %v", numStr, precision, err)
	}

	d2, err := d1.Inverse(2)

	if err != nil {
		t.Errorf("Received error from d1.Inverse(). Error= %v", err)
	}

	if expected != d2.GetNumStr() {
		t.Errorf("Expected NumStr= '%v'. Instead, got %v.", expected, d2.GetNumStr())
	}

}

func TestDecimal_SetPrecisionRound_01(t *testing.T) {

	str1 := "2.0105500"
	precision := uint(4)
	expected := "2.0106"

	d1 := Decimal{}.NewNumStr(str1)

	if str1 != d1.GetNumStr() {
		t.Errorf("Expected NumStr= '%v'. Instead, got %v.", str1, d1.GetNumStr())
	}

	d1.SetPrecisionRound(precision)

	if expected != d1.GetNumStr() {
		t.Errorf("Expected 2nd NumStr= '%v'. Instead, got %v.", expected, d1.GetNumStr())
	}

}

func TestDecimal_SetPrecisionRound_02(t *testing.T) {

	str1 := "-2.0105500"

	d1 := Decimal{}.NewNumStr(str1)

	if str1 != d1.GetNumStr() {
		t.Errorf("Expected NumStr= '%v'. Instead, got %v.", str1, d1.GetNumStr())
	}

	d1.SetPrecisionRound(4)

	expected := "-2.0106"

	if expected != d1.GetNumStr() {
		t.Errorf("Expected NumStr= '%v'. Instead, got %v.", expected, d1.GetNumStr())
	}

}

func TestDecimal_SetPrecisionTrunc_01(t *testing.T) {
	str1 := "2.0105500"

	d1 := Decimal{}.NewNumStr(str1)

	if str1 != d1.GetNumStr() {
		t.Errorf("Expected NumStr= '%v'. Instead, got %v.", str1, d1.GetNumStr())
	}

	d1.SetPrecisionTrunc(4)

	expected := "2.0105"

	if expected != d1.GetNumStr() {
		t.Errorf("Expected NumStr= '%v'. Instead, got %v.", expected, d1.GetNumStr())
	}

}

func TestDecimal_SetPrecisionTrunc_02(t *testing.T) {
	str1 := "-2.0105500"

	d1 := Decimal{}.NewNumStr(str1)


	if str1 != d1.GetNumStr() {
		t.Errorf("Expected NumStr= '%v'. Instead, got %v.", str1, d1.GetNumStr())
	}

	d1.SetPrecisionTrunc(4)

	expected := "-2.0105"

	if expected != d1.GetNumStr() {
		t.Errorf("Expected NumStr= '%v'. Instead, got %v.", expected, d1.GetNumStr())
	}

}

func TestDecimal_AllDigitsNumStr_01(t *testing.T) {
	numStr := "x 123.456 x"
	expected := "123456"

	d := Decimal{}.New()

	outStr, err := d.AllDigitsNumStr(numStr)

	if err != nil {
		t.Errorf("Received error from d.AllDigitsNumStr(numStr). Error= %v", err)
	}

	if expected != outStr {
		t.Errorf("Expected NumStr= '%v'. Instead, got %v.", expected, outStr)
	}

}

func TestDecimal_SetNumStr_01(t *testing.T) {

	nStr1 := "1.35"
	ePrecision := uint(2)
	eSignVal := 1
	d1 := Decimal{}.New()

	d1.SetNumStr(nStr1)

	if nStr1 != d1.GetNumStr() {
		t.Errorf("Expected NumStr = '%v'. Instead got NumStr= '%v'", nStr1, d1.GetNumStr())
	}

	if int(ePrecision) != d1.GetPrecision() {
		t.Errorf("Expected Precision= '%v'. Intead, got Precision= '%v' ", ePrecision, d1.GetPrecision())
	}

	if eSignVal != d1.GetSign() {
		t.Errorf("Expected Sign Value= '%v'. Intead, got Sign Value = '%v' ", eSignVal, d1.GetSign())

	}

	if !d1.GetIsValid() {
		t.Errorf("Expected IsValid == 'true'. Instead got IsValid= '%v'", d1.GetIsValid())
	}

}

func TestDecimal_SetNumStr_02(t *testing.T) {

	nStr1 := "-1.35"
	ePrecision := uint(2)
	eSignVal := -1
	d1 := Decimal{}.New()

	d1.SetNumStr(nStr1)


	if nStr1 != d1.GetNumStr() {
		t.Errorf("Expected NumStr = '%v'. Instead got NumStr= '%v'", nStr1, d1.GetNumStr())
	}

	if int(ePrecision) != d1.GetPrecision() {
		t.Errorf("Expected Precision= '%v'. Intead, got Precision= '%v' ", ePrecision, d1.GetPrecision())
	}


	if eSignVal != d1.GetSign() {
		t.Errorf("Expected Sign Value= '%v'. Intead, got Sign Value = '%v' ", eSignVal, d1.GetSign())

	}

	if !d1.GetIsValid() {
		t.Errorf("Expected IsValid == 'true'. Instead got IsValid= '%v'", d1.GetIsValid())
	}

}

func TestDecimal_SetNumStr_03(t *testing.T) {

	nStr1 := "0.00"
	ePrecision := uint(2)
	eSignVal := 1
	d1 := Decimal{}.New()

	d1.SetNumStr(nStr1)

	if nStr1 != d1.GetNumStr() {
		t.Errorf("Expected NumStr = '%v'. Instead got NumStr= '%v'", nStr1, d1.GetNumStr())
	}

	if int(ePrecision) != d1.GetPrecision() {
		t.Errorf("Expected Precision= '%v'. Intead, got Precision= '%v' ", ePrecision, d1.GetPrecision())
	}

	if eSignVal != d1.GetSign() {
		t.Errorf("Expected Sign Value= '%v'. Intead, got Sign Value = '%v' ", eSignVal, d1.GetSign())

	}

	if !d1.GetIsValid() {
		t.Errorf("Expected IsValid == 'true'. Instead got IsValid= '%v'", d1.GetIsValid())
	}

}

func TestDecimal_SetNumStr_04(t *testing.T) {

	nStr1 := "-0.00"
	eNumStr1 := "0.00"
	ePrecision := uint(2)
	eSignVal := 1
	d1 := Decimal{}.New()

	d1.SetNumStr(nStr1)

	if eNumStr1 != d1.GetNumStr() {
		t.Errorf("Expected NumStr = '%v'. Instead got NumStr= '%v'", eNumStr1, d1.GetNumStr())
	}

	if int(ePrecision) != d1.GetPrecision() {
		t.Errorf("Expected Precision= '%v'. Intead, got Precision= '%v' ", ePrecision, d1.GetPrecision())
	}

	if eSignVal != d1.GetSign() {
		t.Errorf("Expected Sign Value= '%v'. Intead, got Sign Value = '%v' ", eSignVal, d1.GetSign())

	}

	if !d1.GetIsValid() {
		t.Errorf("Expected IsValid == 'true'. Instead got IsValid= '%v'", d1.GetIsValid())
	}

}

func TestDecimal_SetNumStr_05(t *testing.T) {

	nStr1 := "92"
	eNumStr1 := "92"
	ePrecision := uint(0)
	eSignVal := 1
	d1 := Decimal{}.New()

	d1.SetNumStr(nStr1)

	if eNumStr1 != d1.GetNumStr() {
		t.Errorf("Expected NumStr = '%v'. Instead got NumStr= '%v'", eNumStr1, d1.GetNumStr())
	}

	if int(ePrecision) != d1.GetPrecision() {
		t.Errorf("Expected Precision= '%v'. Intead, got Precision= '%v' ", ePrecision, d1.GetPrecision())
	}

	if eSignVal != d1.GetSign() {
		t.Errorf("Expected Sign Value= '%v'. Intead, got Sign Value = '%v' ", eSignVal, d1.GetSign())

	}

	if !d1.GetIsValid() {
		t.Errorf("Expected IsValid == 'true'. Instead got IsValid= '%v'", d1.GetIsValid())
	}

}

func TestDecimal_SetFloat_01(t *testing.T) {

	fVal := float32(92.25)
	eNumStr1 := "92.25"
	ePrecision := uint(2)
	eSignVal := 1
	d1 := Decimal{}.New()

	err := d1.SetFloat(fVal)

	if err != nil {
		t.Errorf("Received error from d1.SetFloat(fVal). fVal= '%v' Error= %v ", fVal, err)
	}

	if  eNumStr1 != d1.GetNumStr() {
		t.Errorf("Expected NumStr = '%v'. Instead got NumStr= '%v'", eNumStr1, d1.GetNumStr())
	}

	if int(ePrecision) != d1.GetPrecision() {
		t.Errorf("Expected Precision= '%v'. Intead, got Precision= '%v' ", ePrecision, d1.GetPrecision())
	}


	if eSignVal != d1.GetSign() {
		t.Errorf("Expected Sign Value= '%v'. Intead, got Sign Value = '%v' ", eSignVal, d1.GetSign())

	}

	if !d1.GetIsValid() {
		t.Errorf("Expected IsValid == 'true'. Instead got IsValid= '%v'", d1.GetIsValid())
	}

}

func TestDecimal_SetFloat_02(t *testing.T) {

	fVal := float32(-92.25)
	eNumStr1 := "-92.25"
	ePrecision := uint(2)
	eSignVal := -1
	d1 := Decimal{}.New()

	err := d1.SetFloat(fVal)

	if err != nil {
		t.Errorf("Received error from d1.SetFloat(fVal). fVal= '%v' Error= %v ", fVal, err)
	}

	if  eNumStr1 != d1.GetNumStr() {
		t.Errorf("Expected NumStr = '%v'. Instead got NumStr= '%v'", eNumStr1, d1.GetNumStr())
	}

	if int(ePrecision) != d1.GetPrecision() {
		t.Errorf("Expected Precision= '%v'. Intead, got Precision= '%v' ", ePrecision, d1.GetPrecision())
	}

	if eSignVal != d1.GetSign() {
		t.Errorf("Expected Sign Value= '%v'. Intead, got Sign Value = '%v' ", eSignVal, d1.GetSign())

	}

	if !d1.GetIsValid() {
		t.Errorf("Expected IsValid == 'true'. Instead got IsValid= '%v'", d1.GetIsValid())
	}

}

func TestDecimal_SetFloat64_01(t *testing.T) {

	fVal := float64(92.256)
	eNumStr1 := "92.256"
	ePrecision := uint(3)
	eSignVal := 1
	d1 := Decimal{}.New()

	err := d1.SetFloat64(fVal)

	if err != nil {
		t.Errorf("Received error from d1.SetFloat64(fVal). fVal= '%v' Error= %v ", fVal, err)
	}

	if eNumStr1 != d1.GetNumStr() {
		t.Errorf("Expected NumStr = '%v'. Instead got NumStr= '%v'", eNumStr1, d1.GetNumStr())
	}

	if int(ePrecision) != d1.GetPrecision() {
		t.Errorf("Expected Precision= '%v'. Intead, got Precision= '%v' ", ePrecision, d1.GetPrecision())
	}

	if eSignVal != d1.GetSign() {
		t.Errorf("Expected Sign Value= '%v'. Intead, got Sign Value = '%v' ", eSignVal, d1.GetSign())

	}

	if !d1.GetIsValid() {
		t.Errorf("Expected IsValid == 'true'. Instead got IsValid= '%v'", d1.GetIsValid())
	}

}

func TestDecimal_SetFloat64_02(t *testing.T) {

	fVal := float64(-92.25)
	eNumStr1 := "-92.25"
	ePrecision := uint(2)
	eSignVal := -1
	d1 := Decimal{}.New()

	err := d1.SetFloat64(fVal)

	if err != nil {
		t.Errorf("Received error from d1.SetFloat64(fVal). fVal= '%v' Error= %v ", fVal, err)
	}

	if eNumStr1 != d1.GetNumStr() {
		t.Errorf("Expected NumStr = '%v'. Instead got NumStr= '%v'", eNumStr1, d1.GetNumStr())
	}

	if int(ePrecision) != d1.GetPrecision() {
		t.Errorf("Expected Precision= '%v'. Intead, got Precision= '%v' ", ePrecision, d1.GetPrecision())
	}

	if eSignVal != d1.GetSign() {
		t.Errorf("Expected Sign Value= '%v'. Intead, got Sign Value = '%v' ", eSignVal, d1.GetSign())
	}

	if !d1.GetIsValid() {
		t.Errorf("Expected IsValid == 'true'. Instead got IsValid= '%v'", d1.GetIsValid())
	}

}
func TestDecimal_SetFloatBig_01(t *testing.T) {

	eNumStr1 := "92.256"
	fVal, isOk := big.NewFloat(0.0).SetString(eNumStr1)

	if !isOk {
		t.Errorf("bigFloat.SetString failed to convert eNumStr1. eNumStr1= '%v'", eNumStr1)
	}

	ePrecision := uint(3)
	eSignVal := 1
	d1 := Decimal{}.New()

	err := d1.SetFloatBig(fVal)

	if err != nil {
		t.Errorf("d1.SetFloatBig(fVal) returned an error. fVal= '%v' Error= %v", eNumStr1, err)
	}

	if eNumStr1 != d1.GetNumStr() {
		t.Errorf("Expected NumStr = '%v'. Instead got NumStr= '%v'", eNumStr1, d1.GetNumStr())
	}

	if int(ePrecision) != d1.GetPrecision() {
		t.Errorf("Expected Precision= '%v'. Intead, got Precision= '%v' ", ePrecision, d1.GetPrecision())
	}

	if eSignVal != d1.GetSign() {
		t.Errorf("Expected Sign Value= '%v'. Intead, got Sign Value = '%v' ", eSignVal, d1.GetSign())
	}

	if !d1.GetIsValid() {
		t.Errorf("Expected IsValid == 'true'. Instead got IsValid= '%v'", d1.GetIsValid())
	}

}

func TestDecimal_SetFloatBig_02(t *testing.T) {

	eNumStr1 := "-92.25"
	ePrecision := uint(2)
	eSignVal := -1
	fVal, isOk := big.NewFloat(0.0).SetString(eNumStr1)

	if !isOk {
		t.Errorf("bigFloat.SetString failed to convert eNumStr1. eNumStr1= '%v'", eNumStr1)
	}

	d1 := Decimal{}.New()

	err := d1.SetFloatBig(fVal)

	if err != nil {
		t.Errorf("d1.SetFloatBig(fVal) returned an error. fVal= '%v' Error= %v", eNumStr1, err)
	}

	if eNumStr1 != d1.GetNumStr() {
		t.Errorf("Expected NumStr = '%v'. Instead got NumStr= '%v'", eNumStr1, d1.GetNumStr())
	}

	if int(ePrecision) != d1.GetPrecision() {
		t.Errorf("Expected Precision= '%v'. Intead, got Precision= '%v' ", ePrecision, d1.GetPrecision())
	}

	if eSignVal != d1.GetSign() {
		t.Errorf("Expected Sign Value= '%v'. Intead, got Sign Value = '%v' ", eSignVal, d1.GetSign())
	}

	if !d1.GetIsValid() {
		t.Errorf("Expected IsValid == 'true'. Instead got IsValid= '%v'", d1.GetIsValid())
	}

}

func TestDecimal_SetIntFracStrings_01(t *testing.T) {

	intStr := "123"
	fracStr := "456"
	eNumStr := "123.456"
	eSignVal := 1
	ePrecision := uint(3)

	d1 := Decimal{}.New()

	err := d1.SetIntFracStrings(eSignVal, intStr, fracStr)

	if err != nil {
		t.Errorf("d1.SetIntFracStrings(eSignVal, intStr, fracStr) returned an error. eSignVal= '%v' intStr= '%v' fracStr= '%v' Error= %v", eSignVal, intStr, fracStr, err)
	}

	if eNumStr != d1.GetNumStr() {
		t.Errorf("Expected NumStr = '%v'. Instead got NumStr= '%v'", eNumStr, d1.GetNumStr())
	}

	if int(ePrecision) != d1.GetPrecision() {
		t.Errorf("Expected Precision= '%v'. Intead, got Precision= '%v' ", ePrecision, d1.GetPrecision())
	}

	if eSignVal != d1.GetSign() {
		t.Errorf("Expected Sign Value= '%v'. Intead, got Sign Value = '%v' ", eSignVal, d1.GetSign())
	}

	if !d1.GetIsValid() {
		t.Errorf("Expected IsValid == 'true'. Instead got IsValid= '%v'", d1.GetIsValid())
	}

}

func TestDecimal_SetIntFracStrings_02(t *testing.T) {

	intStr := "123"
	fracStr := "0456"
	eNumStr := "-123.0456"
	eSignVal := -1
	ePrecision := uint(4)

	d1 := Decimal{}.New()

	err := d1.SetIntFracStrings(eSignVal, intStr, fracStr)

	if err != nil {
		t.Errorf("d1.SetIntFracStrings(eSignVal, intStr, fracStr) returned an error. eSignVal= '%v' intStr= '%v' fracStr= '%v' Error= %v", eSignVal, intStr, fracStr, err)
	}


	if eNumStr != d1.GetNumStr() {
		t.Errorf("Expected NumStr = '%v'. Instead got NumStr= '%v'", eNumStr, d1.GetNumStr())
	}

	if int(ePrecision) != d1.GetPrecision() {
		t.Errorf("Expected Precision= '%v'. Intead, got Precision= '%v' ", ePrecision, d1.GetPrecision())
	}

	if eSignVal != d1.GetSign() {
		t.Errorf("Expected Sign Value= '%v'. Intead, got Sign Value = '%v' ", eSignVal, d1.GetSign())
	}

	if !d1.GetIsValid() {
		t.Errorf("Expected IsValid == 'true'. Instead got IsValid= '%v'", d1.GetIsValid())
	}

}
